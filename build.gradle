/*
 *      FIDO UAF 1.1 Protocol and Assertion Parser Support
 *      Copyright (C) 2019  Alexander Nikiforov
 *
 *      This program is free software: you can redistribute it and/or modify
 *      it under the terms of the GNU General Public License as published by
 *      the Free Software Foundation, either version 3 of the License, or
 *      (at your option) any later version.
 *
 *      This program is distributed in the hope that it will be useful,
 *      but WITHOUT ANY WARRANTY; without even the implied warranty of
 *      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *      GNU General Public License for more details.
 *
 *      You should have received a copy of the GNU General Public License
 *      along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
}

group 'ch.alni'
version '0.1.0'

allprojects {

    repositories {
        mavenCentral()
    }

    apply plugin: 'idea'
    apply plugin: 'jacoco'
}

subprojects {
    ext {
        generatedJavaDir = "$buildDir/generated/java"
    }

    project.tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'

        compileJava {
            options.annotationProcessorGeneratedSourcesDirectory = project.file(project.generatedJavaDir)
        }
    }

    project.tasks.withType(JacocoReport) {
        reports {
            xml.enabled = true // coveralls plugin depends on xml format report
            html.enabled = true
        }
        classDirectories.setFrom sourceSets.main.allSource
    }
}

task jacocoMerge(type: JacocoMerge) {
    executionData = project.fileTree(dir: project.rootDir, includes: ['**/jacoco/*.exec'], excludes: ['**/jacocoMerge.exec'])
}

task jacocoRootReport(type: JacocoReport) {
    executionData.builtBy project.tasks.jacocoMerge
    executionData.setFrom project.tasks.jacocoMerge.asType(JacocoMerge).executionData

    doFirst {
        subprojects.findAll { Project subproject ->
            subproject.tasks.findAll { Task task -> task.extensions.findByType(JacocoTaskExtension) }
        }
        .each { Project subproject ->
            def javaPluginConvention = subproject.convention.getPlugin(JavaPluginConvention.class)
            if (javaPluginConvention) {
                sourceSets(javaPluginConvention.sourceSets.main)
            }
        }
    }

    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

coveralls {
    jacocoReportPath = project.tasks.jacocoRootReport.asType(JacocoReport).reports.xml.destination.path

    // unfortunately, in case of a multiproject build the Coveralls plugin does not provide any possibility to re-configure the 
    // sources other than to hard code them for each source set in the subprojects
    sourceDirs = project.subprojects.collectMany { Project subproject ->
        [subproject.file('src/main/java/').path, subproject.file('build/generated/java/').path]
    } as List<String>
}

tasks.coveralls {
    dependsOn jacocoRootReport
}

wrapper {
    gradleVersion = '5.1.1'
}
