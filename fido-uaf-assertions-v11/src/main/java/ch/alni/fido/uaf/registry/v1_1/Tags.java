package ch.alni.fido.uaf.registry.v1_1;

/**
 * Tags have been allocated for data types in UAF protocol messages
 */
public interface Tags {
    /**
     * The content of this tag is the authenticator response to a Register command.
     */
    int TAG_UAFV1_REG_ASSERTION = 0x3E01;
    /**
     * The content of this tag is the authenticator response to a Sign command.
     */
    int TAG_UAFV1_AUTH_ASSERTION = 0x3E02;

    /**
     * Indicates Key Registration Data.
     */
    int TAG_UAFV1_KRD = 0x3E03;

    /**
     * Indicates data signed by the authenticator using UAuth.priv key.
     */
    int TAG_UAFV1_SIGNED_DATA = 0x3E04;

    /**
     * Indicates DER encoded attestation certificate.
     */
    int TAG_ATTESTATION_CERT = 0x2E05;

    /**
     * Indicates a cryptographic signature.
     */
    int TAG_SIGNATURE = 0x2E06;

    /**
     * Indicates full basic attestation as defined in [UAFProtocol].
     */
    int TAG_ATTESTATION_BASIC_FULL = 0x3E07;

    /**
     * Indicates surrogate basic attestation as defined in [UAFProtocol].
     */
    int TAG_ATTESTATION_BASIC_SURROGATE = 0x3E08;

    /**
     * Indicates use of elliptic curve based direct anonymous attestation as defined in [FIDOEcdaaAlgorithm]. Support
     * for this attestation type is optional at this time. It might be required by FIDO Certification.
     */
    int TAG_ATTESTATION_ECDAA = 0x3E09;

    /**
     * Represents a generated KeyID.
     */
    int TAG_KEYID = 0x2E09;

    /**
     * Represents a generated final challenge hash as defined in [UAFProtocol].
     */
    int TAG_FINAL_CHALLENGE_HASH = 0x2E0A;

    /**
     * Represents an Authenticator Attestation ID as defined in [UAFProtocol].
     */
    int TAG_AAID = 0x2E0B;

    /**
     * Represents a generated public key.
     */
    int TAG_PUB_KEY = 0x2E0C;

    /**
     * Represents the use counters for an authenticator.
     */
    int TAG_COUNTERS = 0x2E0D;

    /**
     * Represents authenticator information necessary for message processing.
     */
    int TAG_ASSERTION_INFO = 0x2E0E;

    /**
     * Represents a nonce value generated by the authenticator.
     */
    int TAG_AUTHENTICATOR_NONCE = 0x2E0F;

    /**
     * Represents a hash of the transaction content sent to the authenticator.
     */
    int TAG_TRANSACTION_CONTENT_HASH = 0x2E10;

    /**
     * This is a composite tag indicating that the content is an extension.
     */
    int TAG_EXTENSION_CRITICAL = 0x3E11;

    /**
     * It's a critical extension and if the recipient does not understand the contents of this tag, it must abort
     * processing of the entire message.
     */
    int TAG_EXTENSION = 0x3E12;

    /**
     * Represents extension ID. Content of this tag is a UINT8[] encoding of a UTF-8 string.
     */
    int TAG_EXTENSION_ID = 0x2E13;

    /**
     * Represents extension data. Content of this tag is a UINT8[] byte array.
     */

    int TAG_EXTENSION_DATA = 0x2E14;

}
